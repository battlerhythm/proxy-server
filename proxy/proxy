#!/usr/bin/env python

"""
Reference
https://docs.python.org/2/library/socket.html
https://docs.python.org/2/howto/sockets.html
http://voorloopnul.com/blog/a-python-proxy-in-less-than-100-lines-of-code/
"""

import sys
import socket
import select
import time
import re
import argparse

buffer_size = 4096
p = re.compile('/vod/\d+Seg\d+-Frag\d+')

class Forward:
    def __init__(self):
        self.forward = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def start(self, host, port):
        try:
            self.forward.bind((args.fakeip, 0))
            self.forward.connect((host, port))
            return self.forward
        except Exception, e:
            print e
            return False

class TheServer:
    def __init__(self, host, port):
        self.input_list = []
        self.channel = {}
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Make socket
        self.server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # Reuse address
        self.server.bind((host, port)) # Visible to outside with the interface (host, port)
        self.server.listen(200) # Number of client can handle 200

    def main_loop(self):
        self.input_list.append(self.server) # Add socket
        self.tPut = 10 # Initialize throughput as 10kbps
        self.bitrate = 10
        self.duration = 1
        self.caltPut = 10
        self.chunkname = None
        contLen = None
        timeS = None

        while True:
            ss = select.select
            inputready, outputready, exceptready = ss(self.input_list, [], [])
            for self.s in inputready:

                if self.s == self.server:
                    self.on_accept()
                    break

                # inbound from target server
                if (self.s.getpeername()[0] == args.serverip):
                    self.data = self.s.recv(buffer_size)
                    tempTimeF = time.time()
                    if 'Content-Type: video' in self.data:
                        self.duration = timeF - timeS
                        contLen = contLenParse(self.data) # Parsing Contents Length in bytes
                        self.caltPut = tPutCal(self.duration, contLen*8/1024)
                        self.tPut = float(args.a) * self.caltPut + (1-float(args.a)) * self.tPut
                        self.bitrate = bitrateSel(self.tPut)
                        with open(args.logfile, 'w') as log:
                            log.write('%d %f %d %.1f %d %s %s\n' % (time.time(), self.duration, self.caltPut, self.tPut, self.bitrate, args.serverip, self.chunkname) )
                        log.closed

                # inbound from client
                else:
                    self.data = self.s.recv(buffer_size)
                    tempTimeS = time.time()
                    if 'GET /vod/' in self.data: # When Proxy got reqeust 'GET' from client
                        timeS = tempTimeS

                if len(self.data) == 0: # if received data is empty, close
                    self.on_close()
                    break
                else: # if received data is not empty, handover the data to peer
                    self.on_recv()

    def on_accept(self):
        forward = Forward().start(args.serverip, 8080)
        clientsock, clientaddr = self.server.accept()
        if forward:
            print clientaddr, "has connected"
            self.input_list.append(clientsock)
            self.input_list.append(forward)
            self.channel[clientsock] = forward
            self.channel[forward] = clientsock
        else:
            print "Can't establish connection with remote server.",
            print "Closing connection with client side", clientaddr
            clientsock.close()

    def on_close(self):
        print self.s.getpeername(), "has disconnected"
        #remove objects from input_list
        self.input_list.remove(self.s)
        self.input_list.remove(self.channel[self.s])
        out = self.channel[self.s]
        # close the connection with client
        self.channel[out].close()  # equivalent to do self.s.close()
        # close the connection with remote server
        self.channel[self.s].close()
        # delete both objects from channel dict
        del self.channel[out]
        del self.channel[self.s]

    def on_recv(self):
        data = self.data
        if (self.s.getpeername()[0] == args.serverip): # outbound to client w/ modification
            if 'big_buck_bunny.f4m' in data: # replace manifest file
                data = self.data.replace('big_buck_bunny.f4m', 'big_buck_bunny_nolist.f4m')
                print('manifest file replaced')
            self.channel[self.s].send(data)
            pass
        else: # outbound to target server w/ modification
            if 'GET /vod/' in data: # bitrate adaptive function
                s = self.data.split()
                if p.match(s[1]):
                    temp = s[1]
                    self.chunkname = chunkSel(self.bitrate, s[1])
                    data = data.replace(s[1], self.chunkname)
                    print("chunkname changed to" + self.chunkname)
            self.channel[self.s].send(data)

def tPutCal(duration, sizeOfData):
    return sizeOfData/duration

def bitrateSel(th):
    print(th)
    if (th >= 1.5*1000):
        print("1000kbps")
        return 1000 # 10kbps
    elif (th >= 1.5*500):
        print("500kbps")
        return 500 # 100kbps
    elif (th >= 1.5*100):
        print("100kbps")
        return 100 # 500kbps
    else:
        print("10kbps")
        return 10 # 1000kbps

def chunkSel(bitrate, URL):
    s = URL.split('-')
    ptSeg = s[0].find('Seg')
    ptFrag = s[1].find('Frag')
    s = '/vod/' + str(bitrate) + 'Seg' + s[0][ptSeg+3:] + '-Frag' + s[1][ptFrag+4:]
    return s

def contLenParse(data):
    contLen = float(data.split('\n')[3].rstrip().split(' ')[1])
    return contLen

def main():
    server = TheServer('', int(args.port))
    try:
        server.main_loop()
    except KeyboardInterrupt:
        print "Ctrl C - Stopping server"
        sys.exit(1)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Launch a proxy.')
    parser.add_argument('logfile', help='name of the logfile')
    parser.add_argument('a', help='a')
    parser.add_argument('port', help='Listening port')
    parser.add_argument('fakeip', help='Fake ip for proxy')
    parser.add_argument('serverip', help='Target server ip')
    args = parser.parse_args()
    main()
